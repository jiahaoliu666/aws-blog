/src  
  ├── /components  
  │     ├── /common  
  │     │     ├── Footer.tsx                // 通用的頁腳組件，顯示應用程序的版權信息和其他鏈接  
  │     │     ├── Navbar.tsx                // 通用的導航欄組件，顯示應用程序的標題和導航鏈接，使用 AuthContext 獲取用戶信息  
  │     │     ├── Pagination.tsx            // 通用的分頁組件，用於在多頁新聞列表中導航  
  │     │     ├── ErrorMessage.tsx          // 顯示錯誤信息的組件  
  │     │     └── Notification.tsx          // 獨立的通知組件，顯示通知列表和處理通知狀態
  │     ├── /news  
  │     │     ├── NewsCard.tsx              // 顯示單個新聞文章的卡片組件，包含標題、摘要和鏈接  
  │     │     ├── NewsSearch.tsx            // 搜索新聞文章的組件，提供搜索框和按鈕  
  │     │     └── NewsFilters.tsx           // 過濾新聞文章的組件，提供過濾選項按鈕  
  │     ├── /profile  
  │     │     └── ProfileUI.tsx             // 新增的 UI 組件，負責用戶個人資料頁面的 UI 顯示
  │     ├── /email                          
  │     │     └── EmailPreview.tsx          // 郵件預覽組件，用於顯示郵件模板的預覽效果
  ├── /context  
  │     ├── AppContext.tsx                  // 管理應用程序的全局狀態和邏輯，包括主題、語言和顯示選項  
  │     ├── AuthContext.tsx                 // 管理用戶身份驗證狀態，如登錄狀態和用戶信息
  │     ├── LanguageContext.tsx             // 新增的語言上下文文件
  │     ├── MessageContext.tsx              // 新增的消息上下文文件
  │     └── NotificationContext.tsx         // 新增的通知上下文文件，管理通知相關的全局狀態
  ├── /hooks  
  │     ├── /news  
  │     │     ├── useFetchNews.ts           // 自定義 Hook，用於從 API 獲取新聞文章數據  
  │     │     ├── useNewsPageLogic.ts       // 自定義 Hook，管理新聞頁面的狀態和邏輯，包括過濾、排序和分頁功能  
  │     │     └── useNewsFavorites.ts       // 自定義 Hook，管理新聞收藏邏輯，提供添加和移除收藏的功能  
  │     ├── /profile  
  │     │     └── useProfileLogic.ts        // 新增的邏輯文件，負責用戶個人資料頁面的邏輯處理
  │     ├── /notifications                  
  │     │     ├── useNotifications.ts       // 管理通知狀態和操作的 Hook
  │     │     └── useEmailNotifications.ts  // 管理郵件通知相關邏輯的 Hook
  │     ├── useAppLogic.ts                  // 自定義 Hook，管理應用程序的全局狀態和邏輯，包括主題、語言和顯示選項  
  │     └── useAuth.ts                      // 自定義 Hook，管理身份驗證邏輯，例如註冊、登錄、登出，使用 AuthContext  
  ├── /pages  
  │     ├── /api  
  │     │     ├── /news  
  │     │     │     ├── index.ts            // API 路由，從 DynamoDB 獲取新聞文章列表  
  │     │     │     ├── summary.ts          // API 路由，從 DynamoDB 獲取單個新聞文章的摘要  
  │     │     │     ├── addFavorite.ts      // API 路由，將文章添加到收藏  
  │     │     │     ├── removeFavorite.ts   // API 路由，從收藏中移除文章  
  │     │     │     └── updateNews.js       // API 路由，從 AWS 部落格抓取最新文章並更新到 DynamoDB
  │     │     ├── /notifications            
  │     │     │     ├── sendEmail.ts        // API 路由，處理郵件通知的發送
  │     │     │     ├── settings.ts         // API 路由，處理通知設置的保存和獲取
  │     │     │     └── status.ts           // API 路由，獲取通知發送狀態
  │     │     ├── /profile  
  │     │     │     ├── activity-log.ts     // 後端 API，用於處理活動日誌的存儲
  │     │     │     ├── recent-log.ts       // 後端 API，用於記錄用戶最近的文章活動
  │     │     │     └── sendFeedback.ts     // API 路由，處理用戶反饋的提交
  ├── /services                             
  │     ├── emailService.js                 // 郵件服務核心邏輯，處理郵件發送和批量處理
  │     ├── dbService.ts                    // 數據庫服務，處理與 DynamoDB 的交互
  │     ├── notificationService.ts          // 通知服務相關的邏輯和功能
  │     └── sesService.ts                   // AWS SES 服務的封裝和配置
  ├── /templates                            
  │     ├── emailTemplates.ts               // 郵件模板文件，包含各種郵件的 HTML 模板
  │     └── notificationTemplates.ts        // 通知模板文件，包含各種通知的格式模板
  ├── /types  
  │     ├── newsType.ts                     // 定義新聞文章的 TypeScript 類型
  │     ├── userType.ts                     // 定義用戶類型，用於描述用戶數據結構
  │     ├── emailTypes.ts                   // 新增的郵件相關類型定義
  │     └── notificationTypes.ts            // 新增的通知相關類型定義
  ├── /utils  
  │     ├── extractDateFromInfo.ts          // 工具函數，用於從字符串中提取日期
  │     ├── apiClient.ts                    // 工具函數，用於封裝 API 請求邏輯  
  │     ├── cognitoClient.ts                // 封裝 AWS Cognito 相關的 API 調用邏輯
  │     ├── emailUtils.ts                   // 新增的郵件相關工具函數
  │     ├── notificationUtils.ts            // 新增的通知相關工具函數
  │     ├── errorHandler.ts                 // 統一的錯誤處理工具，包含自定義錯誤類
  │     ├── logger.ts                       // TypeScript 版本的日誌記錄工具
  │     ├── logger.js                       // JavaScript 版本的日誌記錄工具
  │     └── rateLimiter.js                  // 請求速率限制工具，控制 API 調用頻率
  ├── /lambda
  │     ├── updateNews.js                   // Lambda 函數，用於從 AWS 部落格抓取最新文章
  │     ├── fetchNews.js                    // Lambda 函數，使用翻譯和 OpenAI 總結文章
  │     └── sendNotifications.js            // 新增的 Lambda 函數，處理批量發送通知
  └── /config                               
        ├── aws.ts                          // AWS 服務相關配置
        ├── email.ts                        // 郵件服務相關配置
        ├── aws.js                          // AWS 服務配置，包含 SES 和 DynamoDB 客戶端
        ├── constants.js                    // JavaScript 版本的常量定義
        └── constants.ts                    // TypeScript 版本的常量定義